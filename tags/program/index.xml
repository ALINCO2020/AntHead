<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>program on AntHead</title><link>https://alinco2020.github.io/AntHead/tags/program/</link><description>Recent content in program on AntHead</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Mon, 09 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://alinco2020.github.io/AntHead/tags/program/index.xml" rel="self" type="application/rss+xml"/><item><title>⌨️Extendscriptでリストのsumとmaxを求める</title><link>https://alinco2020.github.io/AntHead/posts/202301092218/</link><pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate><guid>https://alinco2020.github.io/AntHead/posts/202301092218/</guid><description>up: ⌨️Script reduceは使えないから愚直にfor文回せ。以上。</description></item><item><title>⌨️Webプログラミング</title><link>https://alinco2020.github.io/AntHead/posts/202301091331/</link><pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate><guid>https://alinco2020.github.io/AntHead/posts/202301091331/</guid><description>Web系の投稿はここから辿れるようにする。
⌨️サイト制作 📝HLS(HTTPライブストリーム) Backlinks
🐜What is AntHead?</description></item><item><title>📝HLS(HTTPライブストリーム)</title><link>https://alinco2020.github.io/AntHead/posts/202301091321/</link><pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate><guid>https://alinco2020.github.io/AntHead/posts/202301091321/</guid><description>HLSとは 動画ストリーミングプロトコル。Appleが開発。
メリットは2つ
・実装が簡単(HTTPプロトコルなので全てのサーバーで実装可能)
・画質を上げ下げ可能
仕組み ・H.264かH.265で再エンコ
・数秒のセグメント(.ts)に分割
・インデックスファイル(.m3u8)を作ってセグメントの順番を記録
・画質ごとにセグメントを作成（480p 720p 1080pなど）
ネットワークの速度に合わせて動画品質を調整できる（アダプティブビットレートストリーミング）
UDPプロトコルのほうが速いけどHLSはTCPプロトコルを使う
📝HTTPライブストリーミングとは？| HLSストリーミング
Backlinks
⌨️Webプログラミング</description></item><item><title>⌨️Script</title><link>https://alinco2020.github.io/AntHead/posts/202301071000/</link><pubDate>Sat, 07 Jan 2023 00:00:00 +0000</pubDate><guid>https://alinco2020.github.io/AntHead/posts/202301071000/</guid><description>スクリプトに関する知見はここから全て辿れるようにする。
よく使うサイト 📝公式ドキュメント
📝UIビルダー
📝コマンドID一覧
自作関数 ⌨️位置にSetValueする関数 ⌨️特定のプロパティを返す関数 メモ ⌨️Extendscriptでリストのsumとmaxを求める 自作スクリプト配布場所 🐜ALINCOLONY
Backlinks
🐜What is AntHead?</description></item><item><title>⌨️位置にSetValueする関数</title><link>https://alinco2020.github.io/AntHead/posts/202301071101/</link><pubDate>Sat, 07 Jan 2023 00:00:00 +0000</pubDate><guid>https://alinco2020.github.io/AntHead/posts/202301071101/</guid><description>up: ⌨️Script 位置にSetValueするのはなかなか面倒くさい。次元分解で条件分岐が必要だったり。なので関数を作った。
/** * ポジションを設定する関数 * @param {*} layer レイヤー * @param {*} XYarray 配列[x, y, z] * @param {boolean} isSetValueAtTime setValueAtTimeを使うかどうか * @param {*} time setValueAtTimeを使う場合の時間 */ function setPosition(layer, XYZarray, isSetValueAtTime, time) { try { var x = XYZarray[0] var y = XYZarray[1] var z = XYZarray[2] var position = layer.property(&amp;#39;ADBE Transform Group&amp;#39;).property(&amp;#39;ADBE Position&amp;#39;) // setValueを使う場合 if (!isSetValueAtTime) { // 次元分割されていない場合 if (!position.dimensionsSeparated) { position.</description></item><item><title>⌨️特定のプロパティを返す関数</title><link>https://alinco2020.github.io/AntHead/posts/202301071301/</link><pubDate>Sat, 07 Jan 2023 00:00:00 +0000</pubDate><guid>https://alinco2020.github.io/AntHead/posts/202301071301/</guid><description> up: ⌨️Script matchNameが一致するプロパティを再帰で全部返す。何かと便利。
/** * 特定のプロパティを返す * @param {*} rootObj レイヤーでもコンテンツでもOK * @param {*} nestingLevel 0でOK * @param {*} matchName 探したいプロパティのmatchName * @returns */ function returnProp(rootObj, nestingLevel, matchName) { var propTo = []; dumpPropTree(rootObj, nestingLevel, matchName); function dumpPropTree(rootObj, nestingLevel, matchName) { var countProps = rootObj.numProperties; for (var propIndex = 1; propIndex &amp;lt;= countProps; propIndex++) { var prop = rootObj.property(propIndex); if (prop.matchName == matchName) { propTo.push(prop) return; } else { dumpPropTree(prop, nestingLevel + 1, matchName); } } } return propTo; }</description></item><item><title>⌨️サイト制作</title><link>https://alinco2020.github.io/AntHead/posts/202301062241/</link><pubDate>Fri, 06 Jan 2023 00:00:00 +0000</pubDate><guid>https://alinco2020.github.io/AntHead/posts/202301062241/</guid><description>Hogoを使用してmarkdownで記事を書き、github pagesで公開する。
Hugoとは markdownから静的サイトを作れるやつ。テーマも用意されてる。
📝Hugo と Github Pages でブログを作る
バイナリーでインストールしたが、armとamdを間違えた。両者の違いを理解してなかった。amdが正解。
📝CPUアーキテクチャの種類(x86, x64, arm)
Markdownの書き方 そのうち慣れると思うけど一応メモ.
📝Markdown記法 チートシート
VSNotesで記事を書いてgithub pagesでサイト化 markdownでメモ帳を書けるVScodeの拡張機能。Hugo用に設定すればそのまま便利に使えそう。
📝VSCode(Visual Studio Code)をメモ帳として使える拡張機能「VSNotes」が便利そう
スニペットの編集。
📝VS Codeでメモを取る(VSNotes)
📝VSCode &amp;#43; VSNote &amp;#43; Hugoでより快適にmarkdownを書くためのテンプレート設定
画像サーバー プログラムだけでなく映像のことも書いていくとなると画像用の別のサーバーが必要になってくる。
📝ブログの画像配信サーバーとして Cloudflare R2 を使う
📝Cloudflare R2の画像をCache APIでキャッシュして返すメモ
テーマ自作 無料で公開されてるHolyを改造していく。WordPressのテーマのカスタマイズと似てる。
検索欄とか目次とかあるだけでいい。極力シンプルに。
📝Hugo のテーマを自作した
カスタムCSSが上手くいかない。 上手く行った。
TODO　カスタムcssまとめ 📝Hugo でカスタム CSS を適用して画像の配置をイジる
CSSはこのサイトからざっくりコピペ。自作の流れもこれを主に参考にindex.html消したりlist.htmlいじったりした。
📝Hugo のテーマを自作した
リストが記事のdateをもとにソートされ、同じ日の記事は名前でソートされてしまっていたので、ファイル名でソートするようにlist.htmlを書き換えた。ファイル名はHHMMまで書いてるからこれで書き始めた順番通りに並ぶ。
ファイルパスでソートする方法
📝Explicitly order pages by file path - tips &amp;amp;amp; tricks - HUGO</description></item></channel></rss>