<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>program on AntHead</title><link>https://alinco2020.github.io/AntHead/tags/program/</link><description>Recent content in program on AntHead</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Tue, 17 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://alinco2020.github.io/AntHead/tags/program/index.xml" rel="self" type="application/rss+xml"/><item><title>⌨️jsonを読み込む関数</title><link>https://alinco2020.github.io/AntHead/posts/202301171531-read-json/</link><pubDate>Tue, 17 Jan 2023 00:00:00 +0000</pubDate><guid>https://alinco2020.github.io/AntHead/posts/202301171531-read-json/</guid><description> up: ⌨️Script 頻繁に使う。
function readJson(fileName) { var file = new File(dataPath + &amp;#34;/&amp;#34; + fileName + &amp;#34;.txt&amp;#34;); var currentLine; var jsonStuff = []; file.open(&amp;#34;r&amp;#34;); while (!file.eof) { currentLine = file.readln(); jsonStuff.push(currentLine); } file.close(); jsonStuff = jsonStuff.join(&amp;#34;&amp;#34;); var parsedJson = JSON.parse(jsonStuff); return parsedJson; }</description></item><item><title>📝そのレイヤー何レイヤー？</title><link>https://alinco2020.github.io/AntHead/posts/202301171555-what-layer/</link><pubDate>Tue, 17 Jan 2023 00:00:00 +0000</pubDate><guid>https://alinco2020.github.io/AntHead/posts/202301171555-what-layer/</guid><description>up: ⌨️Script layer.matchName で判断。テキストレイヤーだったら&amp;quot;ADBE Text Layer&amp;quot;
matchName一覧はここから</description></item><item><title>📝スクリプトから powershell を実行</title><link>https://alinco2020.github.io/AntHead/posts/202301171536-script-powershell/</link><pubDate>Tue, 17 Jan 2023 00:00:00 +0000</pubDate><guid>https://alinco2020.github.io/AntHead/posts/202301171536-script-powershell/</guid><description> up: ⌨️Script 直接 powershell.exe は実行できないから cmd.exe から起動する。インストール済みフォント一覧を取得するときに使った。
system.callSystem(&amp;#34;cmd.exe /c powershell.exe -c \&amp;#34; your code \&amp;#34;;&amp;#34;);</description></item><item><title>📝スクリプトからフォントを設定</title><link>https://alinco2020.github.io/AntHead/posts/202301171545-set-font-style/</link><pubDate>Tue, 17 Jan 2023 00:00:00 +0000</pubDate><guid>https://alinco2020.github.io/AntHead/posts/202301171545-set-font-style/</guid><description>up: ⌨️Script 一見奇妙な処理。
var sourceText = selectedLayer.text.sourceText // 一旦 sourcceText の値を別の変数に格納 var textDocument = sourceText.value // フォントを変更して textDocument.font = &amp;#39;Arial&amp;#39; // 再び setValue sourceText.setValue(textDocument) フォントが対応してない場合は書き変わらないっぽい。英字フォントで日本語とか。</description></item><item><title>📝設定ファイルの保存先</title><link>https://alinco2020.github.io/AntHead/posts/202301171602-setting-file/</link><pubDate>Tue, 17 Jan 2023 00:00:00 +0000</pubDate><guid>https://alinco2020.github.io/AntHead/posts/202301171602-setting-file/</guid><description> up: ⌨️Script C:\Users\XXX\AppData\Roaming\Aescripts に保存されてることが多い。下記は設定ファイルの保存先のフォルダが無かったら作成するコード。
var dataPath = Folder.decode(Folder.userData) + &amp;#39;/Aescripts/scriptname&amp;#39;; var f = new Folder(dataPath); if (!f.exists) f.create(); スクリプト実行ファイルのパスもついでに。(ScriptUI Panelsのパス)
var filepass = new File(new File($.fileName).parent);</description></item><item><title>📝CEP作る</title><link>https://alinco2020.github.io/AntHead/posts/202301162210-cep/</link><pubDate>Mon, 16 Jan 2023 00:00:00 +0000</pubDate><guid>https://alinco2020.github.io/AntHead/posts/202301162210-cep/</guid><description>up: ⌨️Script CEP作るぞ～～～ ↓公式チュートリアル 📝Getting Started with CEP Extensions
フォルダ構成 manifest.xml 以外はわりと自由にしていいらしい。CSInterface.js が jsx と js の橋渡し役。
ファイル読み込み js 内だと上手くいかないから jsx の方で読み込んでる。勉強不足。（動けばいいんだよ）
今のところエクセル読み込んで table で表示するだけしか作ってないから書くこと無いや。CEP、何ができるのかと思えばUIをHTML5で綺麗に作れるだけで処理自体は普通のjsxスクリプトで出来ることしか出来ないのわりとガッカリ……。MultiEaseのCEP版作りたいけどなぁ俺もなぁ。</description></item><item><title>📝WebSocket</title><link>https://alinco2020.github.io/AntHead/posts/202301112156-websocket/</link><pubDate>Wed, 11 Jan 2023 00:00:00 +0000</pubDate><guid>https://alinco2020.github.io/AntHead/posts/202301112156-websocket/</guid><description>WebSocketとは 双方向に通信する通信プロトコル。速い。
keywords
非同期処理 async wait Backlinks
⌨️Webプログラミング 💹仮想通貨</description></item><item><title>📝CDM(Content Decryption Module)</title><link>https://alinco2020.github.io/AntHead/posts/202301101608-cdm/</link><pubDate>Tue, 10 Jan 2023 00:00:00 +0000</pubDate><guid>https://alinco2020.github.io/AntHead/posts/202301101608-cdm/</guid><description>CDMとは コンテンツを復号化するモジュール（そのまんま）
ライセンスサーバーと直接やり取りし、鍵を取得する。
refs:
📝[MPEG-DASH] DRMシステムの概要と種類 Backlinks
⌨️Webプログラミング 📝動画配信技術</description></item><item><title>📝CDN(Content Delivery Network)</title><link>https://alinco2020.github.io/AntHead/posts/202301101506-cdn/</link><pubDate>Tue, 10 Jan 2023 00:00:00 +0000</pubDate><guid>https://alinco2020.github.io/AntHead/posts/202301101506-cdn/</guid><description>CDNとは 物理的にバラバラの位置に配置したサーバーのこと。ユーザーの所在地に近いところから配信できるから高速。
refs:
📝CDNとは何か？| CDNの仕組みは？ Backlinks
⌨️Webプログラミング 📝DASH(Dynamic Adaptive Streaming over HTTP)</description></item><item><title>📝DASH(Dynamic Adaptive Streaming over HTTP)</title><link>https://alinco2020.github.io/AntHead/posts/202301101453-dash/</link><pubDate>Tue, 10 Jan 2023 00:00:00 +0000</pubDate><guid>https://alinco2020.github.io/AntHead/posts/202301101453-dash/</guid><description>DASHとは 動画ストリーミングプロトコル。正式名称はMPEG-DASH。ISO国際標準規格。HLSと似てる。
仕組み 動画ファイルを2～4秒のセグメント(.mp4)に分割してインデックスファイル(.mpd)を作成 任意のコーデック(なんでもOK)でエンコード クライアントのデバイスにセグメントを送る。CDNが役立つ ユーザー側でデコードして再生 HTTPで実行され、トランスポートプロトコルとしてTCPを使用。
MPDマニフェスト インデックスファイルのこと。形式はXML。
refs:
📝MPEG-DASHとは？| HLSとDASH 📝[MPEG-DASH] MPDのファイル構造 Backlinks
⌨️Webプログラミング 📝動画配信技術 📝HLS(HTTPライブストリーム)</description></item><item><title>📝DRM(Digital Rights Management)</title><link>https://alinco2020.github.io/AntHead/posts/202301101337-drm/</link><pubDate>Tue, 10 Jan 2023 00:00:00 +0000</pubDate><guid>https://alinco2020.github.io/AntHead/posts/202301101337-drm/</guid><description>DRMとは 暗号化してコンテンツを保護する仕組みの総称。
仕組み ライセンスサーバーから発行された鍵で動画ファイルを暗号化 ユーザーがライセンスサーバーに認証をリクエスト 認証が通ると鍵情報を含むライセンス情報がユーザーに返ってきて動画を再生できる TODO 動画ファイルの暗号化技術について調べる
refs:
📝動画配信におけるコンテンツ保護の重要性とそれを実現する仕組みを自分なりにまとめてみた Backlinks
⌨️Webプログラミング 📝動画配信技術</description></item><item><title>📝EME(Encrypt Media Extensions)</title><link>https://alinco2020.github.io/AntHead/posts/202301101623-eme/</link><pubDate>Tue, 10 Jan 2023 00:00:00 +0000</pubDate><guid>https://alinco2020.github.io/AntHead/posts/202301101623-eme/</guid><description>EMEとは 暗号化されたコンテンツを制御するAPI。ライセンスサーバーとやり取りする。
バージョンがいっぱいあって仕様も結構変わるらしい。
refs:
📝Backgrounder on Encrypted Media Extensions (EME) - W3C 📝HTML5 &amp;#43; JavaScriptでDRMつきMPEG-DASHを再生させる Backlinks
⌨️Webプログラミング 📝動画配信技術</description></item><item><title>📝動画配信技術</title><link>https://alinco2020.github.io/AntHead/posts/202301101432-streaming/</link><pubDate>Tue, 10 Jan 2023 00:00:00 +0000</pubDate><guid>https://alinco2020.github.io/AntHead/posts/202301101432-streaming/</guid><description>動画配信技術についてまとめる。
ABR(Adaptive bit Rate)とは ストリーミングを安定させる技術のこと。ネットワークの状態によって動画品質を変化させる。
ABR対応ストリーミングプロトコル 📝HLS(HTTPライブストリーム) 📝DASH(Dynamic Adaptive Streaming over HTTP) HDS(HTTP動的ストリーミング) 暗号化 暗号化されたコンテンツのことをDRMコンテンツとか言ったりする。
HTML単体ではDRMコンテンツを再生できないため、CDMを使って復号化する。CDMはDRMによって中身が違う。
中身が違うCDMを全部同じように使うためのAPIがEME。これのおかげでどんなDRMでも復号化できる。仮想通貨のccxtみたいなイメージ。
refs:
📝アダプティブビットレートストリーミングとは？ 📝web上での動画配信をダウンロードさせないために最近は 📝HTML5 &amp;#43; JavaScriptでDRMつきMPEG-DASHを再生させる Backlinks
⌨️Webプログラミング</description></item><item><title>⌨️Webプログラミング</title><link>https://alinco2020.github.io/AntHead/posts/202301091331-web/</link><pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate><guid>https://alinco2020.github.io/AntHead/posts/202301091331-web/</guid><description>Web系の投稿はここから辿れるようにする。
⌨️サイト制作 📝動画配信技術 📝HLS(HTTPライブストリーム) 📝DASH(Dynamic Adaptive Streaming over HTTP) 📝DRM(Digital Rights Management) 📝CDM(Content Decryption Module) 📝CDN(Content Delivery Network) 📝Websocket Backlinks
🐜What is AntHead?</description></item><item><title>📝Extendscriptでリストのsumとmaxを求める</title><link>https://alinco2020.github.io/AntHead/posts/202301092218-sum-max/</link><pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate><guid>https://alinco2020.github.io/AntHead/posts/202301092218-sum-max/</guid><description>up: ⌨️Script reduceは使えないから愚直にfor文回せ。以上。</description></item><item><title>📝HLS(HTTPライブストリーム)</title><link>https://alinco2020.github.io/AntHead/posts/202301091321-hls/</link><pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate><guid>https://alinco2020.github.io/AntHead/posts/202301091321-hls/</guid><description>HLSとは 動画ストリーミングプロトコル。Appleが開発。
メリットは2つ
・実装が簡単(HTTPプロトコルなので全てのサーバーで実装可能)
・画質を上げ下げ可能
仕組み ・H.264かH.265で再エンコ
・数秒のセグメント(.ts)に分割
・インデックスファイル(.m3u8)を作ってセグメントの順番を記録
・画質ごとにセグメントを作成（480p 720p 1080pなど）
ネットワークの速度に合わせて動画品質を調整できる（アダプティブビットレートストリーミング）
UDPプロトコルのほうが速いけどHLSはTCPプロトコルを使う
refs:
📝HTTPライブストリーミングとは？| HLSストリーミング Backlinks
⌨️Webプログラミング 📝動画配信技術 📝DASH(Dynamic Adaptive Streaming over HTTP)</description></item><item><title>⌨️Script</title><link>https://alinco2020.github.io/AntHead/posts/202301071000-script/</link><pubDate>Sat, 07 Jan 2023 00:00:00 +0000</pubDate><guid>https://alinco2020.github.io/AntHead/posts/202301071000-script/</guid><description>スクリプトに関する知見はここから全て辿れるようにする。
よく使うサイト 📝公式ドキュメント(AEスクリプト)
📝UIビルダー
📝コマンドID一覧
📝公式ドキュメント(AEエクスプレッション)
📝公式ドキュメント(プレミアスクリプト)
自作関数 ⌨️位置にSetValueする関数 ⌨️特定のプロパティを返す関数 ⌨️jsonを読み込む関数 メモ 📝Extendscriptでリストのsumとmaxを求める 📝CEP作る 📝スクリプトから powershell を実行 📝スクリプトからフォントを設定 📝そのレイヤー何レイヤー？ 📝設定ファイルの保存先 自作スクリプト配布場所 🐜ALINCOLONY
Backlinks
🐜What is AntHead?</description></item><item><title>⌨️位置にSetValueする関数</title><link>https://alinco2020.github.io/AntHead/posts/202301071101-position-setvalue/</link><pubDate>Sat, 07 Jan 2023 00:00:00 +0000</pubDate><guid>https://alinco2020.github.io/AntHead/posts/202301071101-position-setvalue/</guid><description>up: ⌨️Script 位置にSetValueするのがなかなか面倒くさいので関数を作った。けどあんまり使ってない。
/** * ポジションを設定する関数 * @param {*} layer レイヤー * @param {*} XYarray 配列[x, y, z] * @param {boolean} isSetValueAtTime setValueAtTimeを使うかどうか * @param {*} time setValueAtTimeを使う場合の時間 */ function setPosition(layer, XYZarray, isSetValueAtTime, time) { try { var x = XYZarray[0] var y = XYZarray[1] var z = XYZarray[2] var position = layer.property(&amp;#39;ADBE Transform Group&amp;#39;).property(&amp;#39;ADBE Position&amp;#39;) // setValueを使う場合 if (!isSetValueAtTime) { // 次元分割されていない場合 if (!position.dimensionsSeparated) { position.</description></item><item><title>⌨️特定のプロパティを返す関数</title><link>https://alinco2020.github.io/AntHead/posts/202301071301-return-prop/</link><pubDate>Sat, 07 Jan 2023 00:00:00 +0000</pubDate><guid>https://alinco2020.github.io/AntHead/posts/202301071301-return-prop/</guid><description> up: ⌨️Script matchNameが一致するプロパティを再帰で全部返す。何かと便利。
/** * 特定のプロパティを返す * @param {*} rootObj レイヤーでもコンテンツでもOK * @param {*} nestingLevel 0でOK * @param {*} matchName 探したいプロパティのmatchName * @returns */ function returnProp(rootObj, nestingLevel, matchName) { var propTo = []; dumpPropTree(rootObj, nestingLevel, matchName); function dumpPropTree(rootObj, nestingLevel, matchName) { var countProps = rootObj.numProperties; for (var propIndex = 1; propIndex &amp;lt;= countProps; propIndex++) { var prop = rootObj.property(propIndex); if (prop.matchName == matchName) { propTo.push(prop) return; } else { dumpPropTree(prop, nestingLevel + 1, matchName); } } } return propTo; }</description></item><item><title>⌨️サイト制作</title><link>https://alinco2020.github.io/AntHead/posts/202301062241-hugo/</link><pubDate>Fri, 06 Jan 2023 00:00:00 +0000</pubDate><guid>https://alinco2020.github.io/AntHead/posts/202301062241-hugo/</guid><description>Hogoを使用してmarkdownで記事を書き、github pagesで公開する。
Hugoとは markdownから静的サイトを作れるやつ。テーマも用意されてる。
📝Hugo と Github Pages でブログを作る
バイナリーでインストールしたが、armとamdを間違えた。両者の違いを理解してなかった。amdが正解。
📝CPUアーキテクチャの種類(x86, x64, arm)
Markdownの書き方 そのうち慣れると思うけど一応メモ.
📝Markdown記法 チートシート
VSNotesで記事を書いてgithub pagesでサイト化 markdownでメモ帳を書けるVScodeの拡張機能。Hugo用に設定すればそのまま便利に使えそう。
📝VSCode(Visual Studio Code)をメモ帳として使える拡張機能「VSNotes」が便利そう
スニペットの編集。
📝VS Codeでメモを取る(VSNotes)
📝VSCode &amp;#43; VSNote &amp;#43; Hugoでより快適にmarkdownを書くためのテンプレート設定
画像サーバー プログラムだけでなく映像のことも書いていくとなると画像用の別のサーバーが必要になってくる。
📝ブログの画像配信サーバーとして Cloudflare R2 を使う
📝Cloudflare R2の画像をCache APIでキャッシュして返すメモ
テーマ自作 無料で公開されてるHolyを改造していく。WordPressのテーマのカスタマイズと似てる。
検索欄とか目次とかあるだけでいい。極力シンプルに。
📝Hugo のテーマを自作した
カスタムCSSが上手くいかない。 上手く行った。
TODO　カスタムcssまとめ 📝Hugo でカスタム CSS を適用して画像の配置をイジる
CSSはこのサイトからざっくりコピペ。自作の流れもこれを主に参考にindex.html消したりlist.htmlいじったりした。
📝Hugo のテーマを自作した
リストが記事のdateをもとにソートされ、同じ日の記事は名前でソートされてしまっていたので、ファイル名でソートするようにlist.htmlを書き換えた。ファイル名はHHMMまで書いてるからこれで書き始めた順番通りに並ぶ。
ファイルパスでソートする方法
📝Explicitly order pages by file path - tips &amp;amp;amp; tricks - HUGO</description></item></channel></rss>