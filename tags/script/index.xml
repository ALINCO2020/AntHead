<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>script on AntHead</title><link>https://alinco2020.github.io/AntHead/tags/script/</link><description>Recent content in script on AntHead</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Wed, 15 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://alinco2020.github.io/AntHead/tags/script/index.xml" rel="self" type="application/rss+xml"/><item><title>📝Macで署名してない開発中のCEPパネルが起動しない</title><link>https://alinco2020.github.io/AntHead/posts/202302152001-mac-not-open-cep/</link><pubDate>Wed, 15 Feb 2023 00:00:00 +0000</pubDate><guid>https://alinco2020.github.io/AntHead/posts/202302152001-mac-not-open-cep/</guid><description>ウィンドウ &amp;gt; エクステンション に名前は見えてるのにクリックしてもパネルが出てこない。
やったこと デバッグモードをオンに Mac再起動 Mac10.9以降に搭載された環境設定をキャッシュするプログラムを強制終了(cfprefsd) Backlinks
📝CEP作る ⌨️Script</description></item><item><title>📝React</title><link>https://alinco2020.github.io/AntHead/posts/202302012251-react/</link><pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate><guid>https://alinco2020.github.io/AntHead/posts/202302012251-react/</guid><description>📝今から始めるReact入門 〜 React の基本
📝npx webpack serveで Cannot GET / になる
結局やってることはDOM操作（なんか仮想DOMとかいうことやって高速化したりしてるらしいけど）
webpack で変換する必要あり。useEffectが最初に1回呼ばれる。
Backlinks
⌨️Webプログラミング 📝CEP作る</description></item><item><title>⌨️jsonを読み込む関数</title><link>https://alinco2020.github.io/AntHead/posts/202301171531-read-json/</link><pubDate>Tue, 17 Jan 2023 00:00:00 +0000</pubDate><guid>https://alinco2020.github.io/AntHead/posts/202301171531-read-json/</guid><description> up: ⌨️Script 頻繁に使う。
function readJson(fileName) { var file = new File(dataPath + &amp;#34;/&amp;#34; + fileName + &amp;#34;.txt&amp;#34;); var currentLine; var jsonStuff = []; file.open(&amp;#34;r&amp;#34;); while (!file.eof) { currentLine = file.readln(); jsonStuff.push(currentLine); } file.close(); jsonStuff = jsonStuff.join(&amp;#34;&amp;#34;); var parsedJson = JSON.parse(jsonStuff); return parsedJson; }</description></item><item><title>📝AEデフォルトのカラーピッカーを使う方法</title><link>https://alinco2020.github.io/AntHead/posts/202301171848-default-color-picker/</link><pubDate>Tue, 17 Jan 2023 00:00:00 +0000</pubDate><guid>https://alinco2020.github.io/AntHead/posts/202301171848-default-color-picker/</guid><description> up: ⌨️Script これ使う。
📝AEColorPicker
cppだぁ～……。何やってるか全然わからん。
Backlinks
📝ExternalObject is 何</description></item><item><title>📝ExternalObject is 何</title><link>https://alinco2020.github.io/AntHead/posts/202301171900-external-object/</link><pubDate>Tue, 17 Jan 2023 00:00:00 +0000</pubDate><guid>https://alinco2020.github.io/AntHead/posts/202301171900-external-object/</guid><description>up: ⌨️Script .dll を実行するとき使うやつ。以下の関数を実装する必要あり。
ESInitialize() ESGetVersion() ESFreeMem() ESTerminate() 参考 : AfterEffects CS6でスクリプトから自作のDLLを参照する方法があるかどうか
これも ExternalObject 使ってる。.aex も中身は .dll みたいなものだったりする？
📝AEデフォルトのカラーピッカーを使う方法</description></item><item><title>📝そのレイヤー何レイヤー？</title><link>https://alinco2020.github.io/AntHead/posts/202301171555-what-layer/</link><pubDate>Tue, 17 Jan 2023 00:00:00 +0000</pubDate><guid>https://alinco2020.github.io/AntHead/posts/202301171555-what-layer/</guid><description>up: ⌨️Script layer.matchName で判断。テキストレイヤーだったら&amp;quot;ADBE Text Layer&amp;quot;
matchName一覧はここから</description></item><item><title>📝スクリプトから powershell を実行</title><link>https://alinco2020.github.io/AntHead/posts/202301171536-script-powershell/</link><pubDate>Tue, 17 Jan 2023 00:00:00 +0000</pubDate><guid>https://alinco2020.github.io/AntHead/posts/202301171536-script-powershell/</guid><description> up: ⌨️Script 直接 powershell.exe は実行できないから cmd.exe から起動する。インストール済みフォント一覧を取得するときに使った。
system.callSystem(&amp;#34;cmd.exe /c powershell.exe -c \&amp;#34; your code \&amp;#34;;&amp;#34;);</description></item><item><title>📝スクリプトからフォントを設定</title><link>https://alinco2020.github.io/AntHead/posts/202301171545-set-font-style/</link><pubDate>Tue, 17 Jan 2023 00:00:00 +0000</pubDate><guid>https://alinco2020.github.io/AntHead/posts/202301171545-set-font-style/</guid><description>up: ⌨️Script 一見奇妙な処理。
var sourceText = selectedLayer.text.sourceText // 一旦 sourcceText の値を別の変数に格納 var textDocument = sourceText.value // フォントを変更して textDocument.font = &amp;#39;Arial&amp;#39; // 再び setValue sourceText.setValue(textDocument) フォントが対応してない場合は書き変わらないっぽい。英字フォントで日本語とか。</description></item><item><title>📝設定ファイルの保存先</title><link>https://alinco2020.github.io/AntHead/posts/202301171602-setting-file/</link><pubDate>Tue, 17 Jan 2023 00:00:00 +0000</pubDate><guid>https://alinco2020.github.io/AntHead/posts/202301171602-setting-file/</guid><description> up: ⌨️Script C:\Users\XXX\AppData\Roaming\Aescripts に保存されてることが多い。下記は設定ファイルの保存先のフォルダが無かったら作成するコード。
var dataPath = Folder.decode(Folder.userData) + &amp;#39;/Aescripts/scriptname&amp;#39;; var f = new Folder(dataPath); if (!f.exists) f.create(); スクリプト実行ファイルのパスもついでに。(ScriptUI Panelsのパス)
var filepass = new File(new File($.fileName).parent);</description></item><item><title>📝CEP作る</title><link>https://alinco2020.github.io/AntHead/posts/202301162210-cep/</link><pubDate>Mon, 16 Jan 2023 00:00:00 +0000</pubDate><guid>https://alinco2020.github.io/AntHead/posts/202301162210-cep/</guid><description>up: ⌨️Script http://localhost:8080/
CEP作るぞ～～～ ↓公式チュートリアル 📝Getting Started with CEP Extensions
フォルダ構成 manifest.xml 以外はわりと自由にしていいらしい。CSInterface.js が jsx と js の橋渡し役。
これらを C:\Program Files (x86)\Common Files\Adobe\CEP\extensions に作る。
js側からファイル読み込み書き出し こんな感じで。ファイルパスは絶対パスじゃないとだめ。
// 読み込み const readFile = (path) =&amp;gt; { let data let res = window.cep.fs.readFile(path, &amp;#39;UTF-8&amp;#39;) if (res.err == 0) { data = JSON.parse(res.data) } else { data = res.err } return data } // 書き出し const writeFile = (path, data) =&amp;gt; { window.</description></item><item><title>📝Extendscriptでリストのsumとmaxを求める</title><link>https://alinco2020.github.io/AntHead/posts/202301092218-sum-max/</link><pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate><guid>https://alinco2020.github.io/AntHead/posts/202301092218-sum-max/</guid><description>up: ⌨️Script reduceは使えないから愚直にfor文回せ。以上。</description></item><item><title>⌨️Script</title><link>https://alinco2020.github.io/AntHead/posts/202301071000-script/</link><pubDate>Sat, 07 Jan 2023 00:00:00 +0000</pubDate><guid>https://alinco2020.github.io/AntHead/posts/202301071000-script/</guid><description>スクリプトに関する知見はここから全て辿れるようにする。
よく使うサイト 📝公式ドキュメント(AEスクリプト)
📝UIビルダー
📝コマンドID一覧
📝公式ドキュメント(AEエクスプレッション)
📝公式ドキュメント(プレミアスクリプト)
自作関数 ⌨️位置にSetValueする関数 ⌨️特定のプロパティを返す関数 ⌨️jsonを読み込む関数 メモ 📝Extendscriptでリストのsumとmaxを求める 📝CEP作る 📝スクリプトから powershell を実行 📝スクリプトからフォントを設定 📝そのレイヤー何レイヤー？ 📝設定ファイルの保存先 📝AEデフォルトのカラーピッカーを使う方法 📝ExternalObject is 何 📝Macで署名してない開発中のCEPパネルが起動しない 自作スクリプト配布場所 🐜ALINCOLONY
Backlinks
🐜What is AntHead?</description></item><item><title>⌨️位置にSetValueする関数</title><link>https://alinco2020.github.io/AntHead/posts/202301071101-position-setvalue/</link><pubDate>Sat, 07 Jan 2023 00:00:00 +0000</pubDate><guid>https://alinco2020.github.io/AntHead/posts/202301071101-position-setvalue/</guid><description>up: ⌨️Script 位置にSetValueするのがなかなか面倒くさいので関数を作った。けどあんまり使ってない。
/** * ポジションを設定する関数 * @param {*} layer レイヤー * @param {*} XYarray 配列[x, y, z] * @param {boolean} isSetValueAtTime setValueAtTimeを使うかどうか * @param {*} time setValueAtTimeを使う場合の時間 */ function setPosition(layer, XYZarray, isSetValueAtTime, time) { try { var x = XYZarray[0] var y = XYZarray[1] var z = XYZarray[2] var position = layer.property(&amp;#39;ADBE Transform Group&amp;#39;).property(&amp;#39;ADBE Position&amp;#39;) // setValueを使う場合 if (!isSetValueAtTime) { // 次元分割されていない場合 if (!position.dimensionsSeparated) { position.</description></item><item><title>⌨️特定のプロパティを返す関数</title><link>https://alinco2020.github.io/AntHead/posts/202301071301-return-prop/</link><pubDate>Sat, 07 Jan 2023 00:00:00 +0000</pubDate><guid>https://alinco2020.github.io/AntHead/posts/202301071301-return-prop/</guid><description> up: ⌨️Script matchNameが一致するプロパティを再帰で全部返す。何かと便利。
/** * 特定のプロパティを返す * @param {*} rootObj レイヤーでもコンテンツでもOK * @param {*} nestingLevel 0でOK * @param {*} matchName 探したいプロパティのmatchName * @returns */ function returnProp(rootObj, nestingLevel, matchName) { var propTo = []; dumpPropTree(rootObj, nestingLevel, matchName); function dumpPropTree(rootObj, nestingLevel, matchName) { var countProps = rootObj.numProperties; for (var propIndex = 1; propIndex &amp;lt;= countProps; propIndex++) { var prop = rootObj.property(propIndex); if (prop.matchName == matchName) { propTo.push(prop) return; } else { dumpPropTree(prop, nestingLevel + 1, matchName); } } } return propTo; }</description></item></channel></rss>